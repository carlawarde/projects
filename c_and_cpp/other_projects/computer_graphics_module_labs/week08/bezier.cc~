#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>
#include <iostream>

#if !defined(GLUT_WHEEL_UP)
#  define GLUT_WHEEL_UP   3
#  define GLUT_WHEEL_DOWN 4
#endif
using namespace std;
/*  Set initial size of the display window.  */
GLsizei winWidth = 600, winHeight = 600;
GLsizei newWidth, newHeight;

/*  Set size of world-coordinate clipping window.  */
GLfloat xwcMin = 0.0, xwcMax = 0.0;
GLfloat ywcMin = 0.0, ywcMax = 0.0;

bool leftButton = false, middleButton = false;
int downX, downY;
int startMouseX, startMouseY, startTransX, startTransY, curTransX, curTransY;
float zoom = 1.0;

class wcPt3D {
   public:
      GLfloat x, y, z;
};

GLint nCtrlPts = 6;
wcPt3D ctrlPts [6] = { {0.0, 0.0, 0.0}, { 30.0, 50.0, 0.0},
                 {60.0, 30.0, 0.0}, {80.0, 80.0, 0.0}, {90.0,20.0,0.0}, {110.0,70.0,0.0} };

void init (void)
{
   /*  Set color of display window to white.  */
   for(int i = 0; i < nCtrlPts; i++) {
	if(ctrlPts[i].x > xwcMax) {
		xwcMax = ctrlPts[i].x;
	}
	if(ctrlPts[i].y > ywcMax) {
		ywcMax = ctrlPts[i].y;
	}
	if(ctrlPts[i].x < xwcMin) {
		xwcMin = ctrlPts[i].x;
	}
	if(ctrlPts[i].y < ywcMin) {
		ywcMin = ctrlPts[i].y;
	}
   }
	
   glClearColor (1.0, 1.0, 1.0, 0.0);
}

void plotPoint (wcPt3D bezCurvePt)
{
    glBegin (GL_POINTS);
        glVertex2f (bezCurvePt.x, bezCurvePt.y);
    glEnd ( );
}

/*  Compute binomial coefficients C for given value of n.  */
void binomialCoeffs (GLint n, GLint * C)
{
   GLint k, j;

   for (k = 0;  k <= n;  k++) {
      /*  Compute n!/(k!(n - k)!).  */
      C [k] = 1;
      for (j = n;  j >= k + 1;  j--)
        C [k] *= j;
      for (j = n - k;  j >= 2;  j--)
        C [k] /= j;
   }
}

void computeBezPt (GLfloat t, wcPt3D * bezPt, GLint nCtrlPts,
                    wcPt3D * ctrlPts, GLint * C)
{
   GLint k, n = nCtrlPts - 1;
   GLfloat bezBlendFcn;

   bezPt->x = bezPt->y = bezPt->z = 0.0;

   /*  Compute blending functions and blend control points. */
   for (k = 0; k < nCtrlPts; k++) {
      bezBlendFcn = C [k] * pow (t, k) * pow (1 - t, n - k);
      bezPt->x += ctrlPts [k].x * bezBlendFcn;
      bezPt->y += ctrlPts [k].y * bezBlendFcn;
      bezPt->z += ctrlPts [k].z * bezBlendFcn;
   }
}

void bezier (wcPt3D * ctrlPts, GLint nCtrlPts, GLint nBezCurvePts)
{
   wcPt3D bezCurvePt;
   GLfloat t;
   GLint *C;

   /*  Allocate space for binomial coefficients  */
   C = new GLint [nCtrlPts];

   binomialCoeffs (nCtrlPts - 1, C);
   for (int i = 0;  i <= nBezCurvePts;  i++) {
      t = GLfloat (i) / GLfloat (nBezCurvePts);
      computeBezPt (t, &bezCurvePt, nCtrlPts, ctrlPts, C);
      plotPoint (bezCurvePt);
   }
   delete [ ] C;
}

void displayFcn (void)
{
   glClear (GL_COLOR_BUFFER_BIT);   //  Clear display window.

   /*if(leftButton){
   glMatrixMode (GL_PROJECTION);
    glLoadIdentity ( );
    double w = glutGet( GLUT_WINDOW_WIDTH );
    double h = glutGet( GLUT_WINDOW_HEIGHT );
    glTranslatef( curTransX / w * 2, curTransY / h * 2, 0 );
    gluOrtho2D (xwcMin, xwcMax, ywcMin, ywcMax);

    glMatrixMode (GL_MODELVIEW);
    glLoadIdentity();
   }*/

   /*  Set example number of control points and number of
    *  curve positions to be plotted along the Bezier curve.
    */
   GLint nBezCurvePts = 1000;

   glPointSize (4);
   glColor3f (1.0, 0.0, 0.0);      //  Set point color to red.

   bezier (ctrlPts, nCtrlPts, nBezCurvePts);

   glLineWidth(1.2);
   glBegin(GL_LINES);
	glColor3f(0.20,0.45,0.42);
	for(int i = 0; i < (nCtrlPts-1); i++) {
		glVertex2f(ctrlPts[i].x,ctrlPts[i].y);
		glVertex2f(ctrlPts[i+1].x,ctrlPts[i+1].y);
	}
   glEnd();
   glutSwapBuffers();
}

void winReshapeFcn (GLint newWidth, GLint newHeight)
{
   /*  Maintain an aspect ratio of 1.0.  */
   //glViewport (0, 0, newHeight, newHeight);

  if(newWidth >= newHeight)
    glViewport(0,0, newHeight, newHeight);
  else
    glViewport(0,0, newWidth, newWidth);

   glMatrixMode (GL_PROJECTION);
   glLoadIdentity ( );

   gluOrtho2D (xwcMin, xwcMax, ywcMin, ywcMax);

   glutPostRedisplay();
}


void MouseCallback(int button, int state, int x, int y)
{
  downX = x; downY = y;
  leftButton = ((button == GLUT_LEFT_BUTTON) && (state == GLUT_DOWN));

  //int mod = glutGetModifiers();

  if(leftButton) {
    /*startMouseX = x;
    startMouseY = glutGet(GLUT_WINDOW_HEIGHT) - y;
    startTransX = curTransX;
    startTransY = curTransY;*/
  }

  /*if(mod == GLUT_ACTIVE_CTRL && button == 3) {
    zoom = zoom * 0.75;
    glLoadIdentity ( );
      
    if(winWidth >= winHeight)
      gluOrtho2D ((newHeight/2) - zoom,(newHeight/2) + zoom, (newHeight/2) - zoom, (newHeight/2) +  zoom);
    else
      gluOrtho2D ((newWidth/2) - zoom,(newWidth/2) + zoom, (newWidth/2) - zoom, (newWidth/2) +  zoom);

    glScalef(zoom,zoom,1.0f);

    glutPostRedisplay();
  }
  else if(mod == GLUT_ACTIVE_CTRL && button == 4) {
     zoom = zoom * 1.5;
     glLoadIdentity ( );

     if(winWidth >= winHeight)
       gluOrtho2D ((newHeight/2) - zoom,(newHeight/2) + zoom, (newHeight/2) - zoom, (newHeight/2) +  zoom);
     else
       gluOrtho2D ((newWidth/2) - zoom,(newWidth/2) + zoom, (newWidth/2) - zoom, (newWidth/2) +  zoom);
 	
     glScalef(zoom,zoom,1.0f);
     glutPostRedisplay();
  }*/
 
}

float yPosPercentage(float yPos) {
  //cout << 1-yPos/winHeight << endl;
   if(yPos/winHeight < 0)
	return 0;
   else if(yPos/winHeight)
	return 1;
   return 1-yPos/winHeight;
}
float xPosPercentage(float xPos) {
  // cout << xPos/winWidth << endl;
   if(xPos/winWidth < 0 )
	return 0;
   else if(xPos/winWidth > 1)
	return 1;
   return xPos/winHeight;
}

void MotionCallback(int x, int y)
 {
  //downX = x;   downY = y;
  /*int curMouseX = x;
  int curMouseY = glutGet( GLUT_WINDOW_HEIGHT) - y;*/
  
  float screenWidth = xwcMax - xwcMin;
  float screenHeight = ywcMax - ywcMin;

  float xPos = screenWidth * xPosPercentage(x);
  float yPos = screenHeight * yPosPercentage(y);

  int boundary = 10;

  if (leftButton) {
    /*curTransX = startTransX + (curMouseX - startMouseX );
    curTransY = startTransY + (curMouseY - startMouseY );*/
    
    for(int i = 0; i < nCtrlPts; i++) {
      if(xPos > ctrlPts[i].x-10 && xPos < ctrlPts[i].x+10)
	   if (yPos > ctrlPts[i].y-10 && yPos < ctrlPts[i].y+10)
		boundary = i;
    }

    if(boundary != 10) {
	ctrlPts[boundary].x = xPos;
	ctrlPts[boundary].y = yPos;
    }
  }
  
  glutPostRedisplay();
  
}


void keyPress(unsigned char key, int x, int y) 
{
   
  /*if(key == 'z')
    {
      zoom = zoom * 0.75;
      glLoadIdentity ( );
      
      if(winWidth >= winHeight)
	gluOrtho2D ((newHeight/2) - zoom,(newHeight/2) + zoom, (newHeight/2) - zoom, (newHeight/2) +  zoom);
      else
	gluOrtho2D ((newWidth/2) - zoom,(newWidth/2) + zoom, (newWidth/2) - zoom, (newWidth/2) +  zoom);
      
      glutPostRedisplay();
    }
  else if(key == 'Z')
    {
      zoom = zoom * 1.5;
      glLoadIdentity ( );

      if(winWidth >= winHeight)
	gluOrtho2D ((newHeight/2) - zoom,(newHeight/2) + zoom, (newHeight/2) - zoom, (newHeight/2) +  zoom);
      else
	gluOrtho2D ((newWidth/2) - zoom,(newWidth/2) + zoom, (newWidth/2) - zoom, (newWidth/2) +  zoom);
 
      glutPostRedisplay();
    }*/
}

int main (int argc, char** argv)
{
   glutInit (&argc, argv);
   glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
   glutInitWindowPosition (50, 50);
   glutInitWindowSize (winWidth, winHeight);
   glutCreateWindow ("Bezier Curve");
   
   init ( );
   glutDisplayFunc (displayFcn);
   glutReshapeFunc (winReshapeFcn);

   glutKeyboardFunc(keyPress);
   glutMouseFunc(MouseCallback);
   glutMotionFunc(MotionCallback);

   glutMainLoop ( );
}
